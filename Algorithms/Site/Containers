Traditionally applications were deployed on bare metal servers or vms.
If a java app needs to be run on vm/bare metal, compatible java version must be present else error will be thrown.
In short, Compatible libraries and dependencies must be present before running the app.

Matrix from hell: Applications enhancement requires libraries and dependencies to be made in dev, stage, prod and cloud envs.
If this is not smooth then it is called matrix from hell.

Containerization: It is encapsulation of application along with its dependencies, libaries and other binaries and configuration files.
Container image is a light weight, standalone executable package of software.
Once container image is ready, it is shared with dev to test the updated version and later on with operations team.
Containerization platforms are docker, red hat openshift, AWS etc.

Container registry: Its a repository or collection of repositories used to store container images.
Any time changes are made to code, a new image is generated and pushed to and can be tested in all environments.


Each container will have its own CPU, memory and disk.

Container runtime: when container is started, container runtime schedules access to shared OS. Docker is most popular container runtime.
others are containerd, rkt.

Runtime helps isolate applications process using 2 linux primitives. a) cgroups(control groups) and b) namespaces

a) cgroups: It limits resources to set a of processes running on linux host.

b) namespaces:  We can assume as virtual cluster inside kubernates cluster. we can have multiple namespaces inside kubernetes cluster and they are isolated from each other.
They help team with organizing, security and performance.
            - Its a virtual cluster inside a cluster.
            - Each name space has its own policies, resource and constraints. Only objects in a particular namespace can see pods, services and other ojects.
            - we can resource limit on a namespace.

> kubectl get namespaces # kubernetes starts with 3 namespaces. a) default b) kube-node-lease c) kube-public d) kube-system(For objects created by K8 system).
> kubectl describe namespace default.
Example: we can create a namespace and limit the processes inside it to use 2 GB on a machine that has 8 GB memory.


Container Management:
     Once containers are deployed, scalability and self-healing is the next challange.
     Orchestration tools like docker swarm, ECS(AWS managed service) EKS, AKS & Red hat openshift automates container scheduling, deployment, health monitoring, networking, load balancing, scaling
     and management.

    Kubernetes:
     kubernetes is one of most popular container orchestrators.
     AWS, Azure, GCP, IBM Bluemix, REd hat Openshift all support kubernetes.
     Only disadvantage is complex installation process.

    AWS Elastic Container Service:
     Integrates easily with AWS tools, for this reason it is highly recommended.
     Advantage is scaling is good but disadvantage is tighly coupled with AWS.

    Docker swarm:
     Ships directly with docker.
     Advantage is already deployed with docker, simplest configuration.
     disadvantage is limited cloud integration.

Container monitoring:
    Because the containers are killed/restarted anytime or because of network failure container monitoring is a challange.

    docker CLI commands
     - docker logs: check logs of a container.
     - docker stats: used to monitor CPU and memory consumption.

     Popular monitoring tools:
     - datadog: Cloud based monitoring and alerting solution. Is shows visualtions, creating apps based on metrics data.

     - Prometheus: open source monitoring and alerting solution. It get the data from containers and using grafana we can visualize it.
       container -> prometheus -> grafana

     - cAdvisor: open source container native monitoring tool from google.
        it has both web interface and REST API to monitor containers directly.




